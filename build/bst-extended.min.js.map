{"version":3,"sources":["bst-extended.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Object","defineProperty","value","_validators2","obj","__esModule","default","_objectAttributes","validControllers","defaultsDataTypes","Controllers","[object Object]","options","constant","this","dataType","fn","join","forEach","name","hasOwnProperty","data","undefined","validator","b","other","./object-attributes","./validators","2","_interopRequireDefault","_node2","_controllers2","BSTCore","controllers","valid","validTree","compare","toString","current","root","node","compareResult","left","right","queue","height","nodeCount","shift","push","heightLeft","getHeight","heightRight","Math","abs","isBalanced","parent","side","ref","toDel","findParentNode","min","findNode","inorder","stack","pop","lastNodeVisited","peekNode","dest","destCore","src","it","preorder","next","done","insert","elements","indexOfMedian","floor","balance","slice","tree","nodes","floorMax","./controllers","./node","3","_main2","./main","4","_core2","g","WeakMap","BinarySearchTree","copy","constructor","get","merge","permanent","size","set","core","result","container","delete","includes","getMin","getMax","getSortedData","newRoot","walkingType","traversalType","traverseDFS","breadthFirstSearch","console","log","treeStructure","string","level","levelIndex","NaN","trees","array","index","object","./core","5","Node","6","enumerable","configurable","writable","setEach","type","attributes","not","TypeError","entries","typeOptions","opts","assign","7","validators","Array","isArray","Map","Set","WeakSet","instance","classObject","methodName","toLowerCase","match","available","keys","indexOfNot","indexOf","splice"],"mappings":"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","file":"bst-extended.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _validators = require(\"./validators\");\n\nvar _validators2 = _interopRequireDefault(_validators);\n\nvar _objectAttributes = require(\"./object-attributes\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst validControllers = [\"valid\", \"compare\", \"toString\"];\nconst defaultsDataTypes = [\"number\", \"string\", \"array\", \"object\", \"map\", \"weakmap\", \"set\", \"weakset\"];\n\nclass Controllers {\n    constructor(options) {\n        // the tree can contains data with only one type\n        // such a number, string, array, ..., or you can set custom data\n        // and you must create custom checking method for that type\n        (0, _objectAttributes.constant)(this, \"dataType\", options.dataType || \"number\");\n\n        /*\n            controller is object containing default methods for data validation, comparing, etc.,\n            but you can override them with your custom methods\n        */\n        const fn = options[this.dataType] || _validators2.default[this.dataType];\n\n        // set validator\n        if (fn) {\n            (0, _objectAttributes.constant)(this, \"validator\", fn);\n        } else {\n            throw `Missing validator for '${this.dataType}'. Choose from default data types (${defaultsDataTypes.join(\", \")}) or if you set your own.\\nIf you set your own data type, you must create method with the same name, which will check if inserted data are of that type.`;\n        }\n\n        // set custom controllers\n        validControllers.forEach(name => {\n            const fn = options[name];\n\n            if (fn && options.hasOwnProperty(name)) {\n                (0, _objectAttributes.constant)(this, name, fn);\n            }\n        });\n    }\n\n    valid(data) {\n        return data !== null && data !== undefined && this.validator(data);\n    }\n\n    /*\n        a < b -> -1\n        a > b -> 1\n        else 0 // for '==' and '==='\n    */\n    compare(a, b) {\n        if (a < b) {\n            return -1;\n        } else if (a > b) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    validTree(other) {\n        return other.dataType === this.dataType;\n    }\n\n    toString(data) {\n        return data;\n    }\n}\nexports.default = Controllers;\n},{\"./object-attributes\":6,\"./validators\":7}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nvar _controllers = require('./controllers');\n\nvar _controllers2 = _interopRequireDefault(_controllers);\n\nvar _objectAttributes = require('./object-attributes');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass BSTCore {\n    constructor(options) {\n        (0, _objectAttributes.constant)(this, {\n            controllers: new _controllers2.default(options || {})\n        });\n    }\n\n    /*\n        controllers\n    */\n    valid(data) {\n        return this.controllers.valid(data);\n    }\n\n    validTree(other) {\n        return this.controllers.validTree(other);\n    }\n\n    compare(a, b) {\n        return this.controllers.compare(a, b);\n    }\n\n    toString(data) {\n        return this.controllers.toString(data);\n    }\n\n    // ------------------------------------\n\n    insert(current, data) {\n        const root = current;\n        const node = new _node2.default(data);\n\n        if (!current) return node;\n\n        while (current) {\n            let compareResult = this.controllers.compare(node.data, current.data);\n\n            if (compareResult < 0) {\n\n                if (current.left) {\n                    current = current.left;\n                } else {\n                    current.left = node;\n                    break;\n                }\n            } else if (compareResult > 0) {\n\n                if (current.right) {\n                    current = current.right;\n                } else {\n                    current.right = node;\n                    break;\n                }\n            } else {\n                // node with such a data already exists\n                return null;\n            }\n        }\n\n        return root;\n    }\n\n    getMin(node) {\n        while (node.left) node = node.left;\n\n        return node.data;\n    }\n\n    getMax(node) {\n        while (node.right) node = node.right;\n\n        return node.data;\n    }\n\n    getHeight(node) {\n        if (!node) return -1;\n\n        const queue = [node];\n        let height = 0;\n\n        while (queue.length) {\n            let nodeCount = queue.length;\n\n            if (nodeCount === 0) return height;\n\n            height++;\n\n            // remove nodes of this level and add nodes of next level\n            while (nodeCount) {\n                let node = queue.shift();\n\n                if (node.left) queue.push(node.left);\n                if (node.right) queue.push(node.right);\n\n                nodeCount--;\n            }\n        }\n\n        return height;\n    }\n\n    isBalanced(node) {\n        if (!node) return true;\n\n        const heightLeft = this.getHeight(node.left);\n        const heightRight = this.getHeight(node.right);\n        const diff = Math.abs(heightLeft - heightRight);\n\n        return diff > 1 ? false : this.isBalanced(node.left) && this.isBalanced(node.right);\n    }\n\n    // todo - iterative alg. 'isBalanced'\n    isBalanced(node) {\n        if (!node) return true;\n\n        let heightLeft = 0;\n        let heightRight = 0;\n        let diff = 0;\n\n        const queue = [node];\n\n        while (queue.length) {}\n    }\n\n    findParentNode(node, data) {\n        let parent = null;\n        let current = node;\n        let side = null;\n\n        while (current) {\n            let compareResult = this.controllers.compare(data, current.data);\n\n            if (compareResult < 0) {\n                parent = current;\n                current = current.left;\n                side = 'left';\n            } else if (compareResult > 0) {\n                parent = current;\n                current = current.right;\n                side = 'right';\n            } else {\n                break;\n            }\n        }\n\n        return { parent, current, side };\n    }\n\n    delete(ref, data) {\n        const root = ref.node;\n\n        let toDel = this.findParentNode(root, data);\n\n        // node with the data wasn't found -> return false\n        if (!toDel.current) return false;\n\n        // node was found\n        if (toDel.current.left && toDel.current.right) {\n\n            const min = {\n                parent: null,\n                current: toDel.current.right,\n                side: 'right'\n            };\n\n            // closest value, to the value we want to delete, is the minimum in the right subtree\n            while (min.current.left) {\n                min.parent = min.current;\n                min.current = min.current.left;\n                min.side = 'left';\n            }\n\n            // swap those two nodes\n            toDel.current.data = min.current.data;\n\n            // now we need to delete the min\n            toDel = min;\n        }\n\n        // delete root (-> the node hasn't got any parent)\n        if (!toDel.parent) {\n            ref.node = null;\n            return true;\n        }\n\n        let current = toDel.current;\n        if (current.left) {\n            toDel.parent[toDel.side] = current.left;\n        } else {\n            toDel.parent[toDel.side] = current.right;\n        }\n\n        return true;\n    }\n\n    findNode(node, data) {\n        const { current } = this.findParentNode(node, data);\n\n        return current;\n    }\n\n    includes(current, data) {\n        return this.findNode(current, data) !== null;\n    }\n\n    getSortedData(node) {\n        return [...this.inorder(node)];\n    }\n\n    /*\n        depth-first search\n    */\n    *preorder(node) {\n        if (!node) return;\n\n        const stack = [node];\n\n        while (stack.length) {\n            let current = stack.pop();\n\n            yield current.data;\n\n            if (current.right) stack.push(current.right);\n            if (current.left) stack.push(current.left);\n        }\n    }\n\n    *inorder(node) {\n        const stack = [];\n\n        while (stack.length || node) {\n            if (node) {\n                stack.push(node);\n\n                node = node.left;\n            } else {\n                node = stack.pop();\n\n                yield node.data;\n\n                node = node.right;\n            }\n        }\n    }\n\n    *postorder(node) {\n        const stack = [];\n        let lastNodeVisited = null;\n\n        while (stack.length || node) {\n            if (node) {\n                stack.push(node);\n\n                node = node.left;\n            } else {\n                let peekNode = stack[stack.length - 1];\n\n                // if right child exists and traversing node\n                // from left child, then move right\n                if (peekNode.right && lastNodeVisited !== peekNode.right) {\n                    node = peekNode.right;\n                } else {\n                    yield peekNode.data;\n\n                    lastNodeVisited = stack.pop();\n                }\n            }\n        }\n    }\n\n    /*\n        breadth-first search\n    */\n    *breadthFirstSearch(node) {\n        if (!node) return;\n\n        const queue = [node];\n\n        while (queue.length) {\n            let node = queue.shift();\n\n            yield node.data;\n\n            if (node.left) queue.push(node.left);\n\n            if (node.right) queue.push(node.right);\n        }\n    }\n\n    /**\n        O(n*log(n))\n        merge source tree (src) into dest. tree (dest)\n    */\n    merge(dest, destCore, src) {\n        // source tree\n        const it = this.preorder(src.root);\n        let next = it.next();\n\n        while (!next.done) {\n            dest.insert(next.value);\n\n            next = it.next();\n        }\n\n        return dest;\n    }\n\n    /*\n        How it works:\n         1. get middle element (-> median) from sorted elements\n         2. insert the element to node parameter (node.data = median)\n         3. if left side from median is bigger than 0:\n         3a. create new node on the left of current node (node.left = new Node())\n         3b. call recursively balance() method on left subtree with left side of the elements\n         4. if right side form median is bigger than 0:\n         4a. create new node on the right of current node (node.right = new Node())\n         4b. call recursively balance() method on right subtree with right side of the elements\n          Complexity:\n        O(n) - where n is number of elements (-> each element will be inserted into tree)\n          @param {Node} node\n        @param {Array} elements - sorted elements from tree\n        @return {void}\n    */\n    balance(node, elements) {\n        if (!node) return;\n\n        const indexOfMedian = Math.floor(elements.length / 2);\n\n        node.data = elements[indexOfMedian];\n\n        if (indexOfMedian > 0) {\n            node.left = new _node2.default();\n            this.balance(node.left, elements.slice(0, indexOfMedian));\n        }\n\n        if (indexOfMedian < elements.length - 1) {\n            node.right = new _node2.default();\n            this.balance(node.right, elements.slice(indexOfMedian + 1, elements.length));\n        }\n    }\n\n    treeStructure(node) {\n        if (!node) return [];\n\n        const tree = [[this.toString(node.data)]];\n\n        const queue = [node.left, node.right];\n        let nodes = [];\n\n        let floor = 1;\n        let floorMax = 2 ** floor;\n\n        while (queue.length) {\n            let node = queue.shift();\n\n            if (node) {\n                nodes.push(this.toString(node.data));\n            } else {\n                nodes.push(' ');\n            }\n\n            if (nodes.length >= floorMax) {\n                tree.push(nodes);\n                nodes = [];\n\n                floor++;\n                floorMax = floor ** 2;\n            }\n\n            // don't enqueu nulls\n            if (!node) continue;\n\n            queue.push(node.left);\n            queue.push(node.right);\n        }\n\n        return tree;\n    }\n}\nexports.default = BSTCore;\n},{\"./controllers\":1,\"./node\":5,\"./object-attributes\":6}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _main = require(\"./main\");\n\nvar _main2 = _interopRequireDefault(_main);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// TODO: add Proxy\n\nexports.default = _main2.default;\n},{\"./main\":4}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _validators = require(\"./validators\");\n\nvar _validators2 = _interopRequireDefault(_validators);\n\nvar _node = require(\"./node\");\n\nvar _node2 = _interopRequireDefault(_node);\n\nvar _core = require(\"./core\");\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _objectAttributes = require(\"./object-attributes\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// save private attributes outside of the class\n/*\n    reference: https://en.wikipedia.org/wiki/Tree_traversal\n*/\n\nconst g = new WeakMap();\n\n// options are saved as private data\nconst o = new WeakMap();\n\n/*\n    todo:\n    - node.data - unique / dupli.\n*/\n\nclass BinarySearchTree {\n    /*\n        @param {Object|this} - options or instance of BinarySearchTree (copy constructor)\n    */\n    constructor(options) {\n        // copy constructor\n        if (options instanceof BinarySearchTree) {\n            const other = options;\n            const copy = new this.constructor(o.get(other));\n\n            return copy.merge(other);\n        }\n\n        (0, _objectAttributes.permanent)(this, {\n            root: null,\n            size: 0\n        });\n\n        o.set(this, options);\n\n        const core = new _core2.default(options);\n        g.set(this, core);\n\n        (0, _objectAttributes.constant)(this, \"dataType\", core.controllers.dataType);\n    }\n\n    /*\n        basic interface\n     */\n    insert(data) {\n        const core = g.get(this);\n\n        if (!core.valid(data)) return false;\n\n        const result = core.insert(this.root, data);\n\n        if (!result) return false;\n\n        this.root = result;\n\n        this.size++;\n\n        return true;\n    }\n\n    /**\n     * delete a node with specic data\n     * @param  {*} data - anything, it depends on default set up data type\n     * @return {Boolean}\n     */\n    delete(data) {\n        const core = g.get(this);\n\n        if (!core.valid(data)) return false;\n\n        const container = { node: this.root };\n\n        if (core.delete(container, data)) {\n            this.root = container.node;\n\n            this.size--;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * check if the tree includes node with such a data\n     * @param  {*} data - anything, it depends on default set up data type\n     * @param {Node} node - default is root of tree, but it can be any node\n     * @return {Boolean}\n     */\n    includes(data, node = this.root) {\n        _validators2.default.node(\"includes\", node);\n\n        const core = g.get(this);\n\n        return core.valid(data) && core.includes(node, data);\n    }\n\n    /**\n     * find a node with specific data\n     * @param  {*} data - anything, it depends on default set up data type\n     * @param {Node} node - default is root of tree, but it can be any node\n     * @return {Node|null}\n     */\n    findNode(data, node = this.root) {\n        _validators2.default.node(\"findNode\", node);\n\n        const core = g.get(this);\n\n        if (!core.valid(data)) return null;\n\n        return core.findNode(node, data);\n    }\n\n    getMin(node = this.root) {\n        if (!_validators2.default.node(\"getMin\", node)) return null;\n\n        return g.get(this).getMin(node);\n    }\n\n    getMax(node = this.root) {\n        if (!_validators2.default.node(\"getMax\", node)) return null;\n\n        return g.get(this).getMax(node);\n    }\n\n    getHeight(node = this.root) {\n        if (!_validators2.default.node(\"getHeight\", node)) return null;\n\n        return g.get(this).getHeight(node);\n    }\n\n    isBalanced(node = this.root) {\n        if (!_validators2.default.node(\"isBalanced\", node)) return null;\n\n        return g.get(this).isBalanced(node);\n    }\n\n    /*\n        time complexity - O(2n) - where n is number of elements in this tree\n    */\n    balance() {\n        if (!this.root) return;\n\n        const core = g.get(this);\n\n        // get sorted elements from whole tree\n        // complexity - O(n) - n is number of elements in this tree\n        const elements = core.getSortedData(this.root);\n\n        const newRoot = new _node2.default();\n\n        core.balance(newRoot, elements);\n\n        this.root = newRoot;\n\n        return this;\n    }\n\n    /**\n     * destroy whole tree, all nodes\n     */\n    destroy() {\n        this.root = null;\n        this.size = 0;\n\n        const options = o.get(this);\n\n        // reset bst core with same options (from constructor)\n        g.delete(this);\n        g.set(this, new _core2.default(options));\n\n        return this;\n    }\n\n    /**\n     * collect data from whole tree based on walking type (inorder, postorder, preorder),\n     * with complexity O(n) (n-1 is number of nodes hanging on a input node (param node))\n     * @param {String} walkingType\n     * @param {Node} node - default is root of tree, but it can be any node\n     * @return {Array}\n     */\n    getData(walkingType = \"inorder\", node = this.root) {\n        if (!this.root) return null;\n\n        walkingType = _validators2.default.traversalType(walkingType);\n\n        _validators2.default.node(\"getData\", node);\n\n        const generator = this.traverseDFS(walkingType, node);\n\n        return [...generator];\n    }\n\n    *traverseBFS(node = this.root) {\n        _validators2.default.node(\"traverseBFS\", node);\n\n        return yield* g.get(this).breadthFirstSearch(node);\n    }\n\n    /**\n     * get iterator with specific walking type,\n     * complexity is O(1) (-> it returns generator, not array of data)\n     * @param  {String} walkingType - pre-order, in-order, post-order\n     * @param {Node} node - default is root of tree, but it can be any node\n     * @return {Generator}\n     */\n    *traverseDFS(walkingType = \"preorder\", node = this.root) {\n        walkingType = _validators2.default.traversalType(walkingType);\n\n        _validators2.default.node(\"traverseDFS\", node);\n\n        return node ? yield* g.get(this)[walkingType](node) : null;\n    }\n\n    /*\n        more about toString and when it's called (as 'overloading')\n        http://stackoverflow.com/questions/19620667/javascript-operator-overloading\n    */\n    // toString() {\n    //     if (!this.root) {\n    //         console.log('Binary search tree is empty!');\n    //         return '';\n    //     }\n\n    //     const n = new Node('\\n');\n    //     const queue = [this.root, n];\n    //     const core = g.get(this);\n    //     let str = '';\n\n    //     while (queue.length) {\n    //         let node = queue.shift();\n    //         let nodeToString = '';\n\n    //         if (core.valid(node.data)) {\n    //             nodeToString = core.toString(node.data);\n    //         }\n\n    //         str += nodeToString + (node.data !== '\\n' ? ' ' : '');\n\n    //         if (node === n && queue.length) {\n    //             queue.push(n);\n    //         }\n\n    //         if (node.left) queue.push(node.left);\n    //         if (node.right) queue.push(node.right);\n    //     }\n\n    //     return str.trim();\n    // }\n\n    // todo\n    toString(data) {\n        if (!this.root) {\n            console.log(\"Binary search tree is empty!\");\n            return \"\";\n        }\n\n        const current = data ? this.findNode(data) : this.root;\n\n        if (!current) return \"\";\n\n        const tree = g.get(this).treeStructure(current);\n        // get length of last level\n        const treeWidth = tree[tree.length - 1].length;\n        let string = \"\";\n        const space = \" \";\n\n        // print level by level\n        tree.forEach((level, levelIndex) => {\n            // let paddingLeft = Math.floor((treeWidth - (2 ** levelIndex)) / 2);\n            // string += space.repeat(paddingLeft);\n            level.forEach(value => {\n                string += value + \" \";\n            });\n            string += \"\\n\";\n        });\n\n        return string;\n    }\n\n    /*\n        more about valueOf and when it's called (as 'overloading')\n        http://stackoverflow.com/questions/19620667/javascript-operator-overloading\n    */\n    valueOf() {\n        /*\n            Binary search tree is data structure, not a number.\n            There is no value which could represent the whole tree.\n        */\n        return NaN;\n    }\n\n    /**\n     * merge two or more trees together\n     * @return {this} instance of current binary tree (which includes all the trees together)\n     */\n    merge(...trees) {\n        if (trees && _validators2.default.array(trees[0])) {\n            trees = trees[0];\n        }\n\n        const core = g.get(this);\n\n        trees.forEach((tree, index) => {\n            if (!_validators2.default.object(tree) || !_validators2.default.constructor(tree, BinarySearchTree)) {\n                throw `Invalid input, argument on position ${index} is not instance of BinarySearchTree class.`;\n            }\n\n            if (core.validTree(tree)) {\n                core.merge(this, core, tree);\n            } else {\n                throw `Can't merge two binary search trees with different data type: ${this.controllers.dataType} !== ${tree.controllers.dataType}.\\n-> Invalid argument on position ${index}/${trees.length}.`;\n            }\n        });\n\n        return this;\n    }\n}\nexports.default = BinarySearchTree;\n},{\"./core\":2,\"./node\":5,\"./object-attributes\":6,\"./validators\":7}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _objectAttributes = require('./object-attributes');\n\nclass Node {\n    constructor(data, left = null, right = null) {\n        (0, _objectAttributes.permanent)(this, {\n            data: data,\n            left: left,\n            right: right\n        });\n    }\n}\nexports.default = Node;\n},{\"./object-attributes\":6}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.constant = exports.permanent = undefined;\n\nvar _validators = require(\"./validators\");\n\nvar _validators2 = _interopRequireDefault(_validators);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst options = {\n    permanent: {\n        enumerable: false,\n        configurable: false,\n        writable: true\n    },\n\n    constant: {\n        enumerable: false,\n        configurable: false,\n        writable: false\n    }\n};\n\nconst setEach = (type, object, attributes) => {\n    if (_validators2.default.not(\"object\", object) || _validators2.default.not(\"object\", attributes)) {\n        throw new TypeError(\"Second and third parameters must be objects.\");\n    }\n\n    const entries = Object.entries(attributes);\n    const typeOptions = options[type];\n\n    for (let [name, value] of entries) {\n        let opts = Object.assign({ value }, typeOptions);\n\n        Object.defineProperty(object, name, opts);\n    }\n};\n\n// undeletable\nconst permanent = (object, name, value) => {\n    // setEach('permanent', object, is.object(name) ? name : {\n    //     [name]: value\n    // });\n    if (_validators2.default.object(name)) {\n        // name == attributs\n        setEach(\"permanent\", object, name);\n    } else {\n        setEach(\"permanent\", object, {\n            [name]: value\n        });\n    }\n};\n\n// constant object / class attribute\nconst constant = (object, name, value) => {\n    if (_validators2.default.object(name)) {\n        // name == attributs\n        setEach(\"constant\", object, name);\n    } else {\n        setEach(\"constant\", object, {\n            [name]: value\n        });\n    }\n};\n\nexports.permanent = permanent;\nexports.constant = constant;\n},{\"./validators\":7}],7:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _node = require(\"./node\");\n\nvar _node2 = _interopRequireDefault(_node);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst validators = {\n    number(data) {\n        return typeof data === \"number\";\n    },\n    string(data) {\n        return typeof data === \"string\";\n    },\n    array(data) {\n        return Array.isArray(data);\n    },\n    object(data) {\n        return this.constructor(data, Object);\n    },\n    map(data) {\n        return this.constructor(data, Map);\n    },\n    weakmap(data) {\n        return this.constructor(data, WeakMap);\n    },\n\n    set(data) {\n        return this.constructor(data, Set);\n    },\n\n    weakset(data) {\n        return this.constructor(data, WeakSet);\n    },\n\n    constructor(instance, classObject) {\n        // return instance.constructor === classObject;\n        return instance instanceof classObject;\n    },\n\n    node(methodName, node) {\n        // null isn't invalid value\n        if (node === null) return false;\n\n        if (!this.object(node) || !this.constructor(node, _node2.default)) {\n            throw new TypeError(`Invalid argument '${node}' in '${methodName}' method. It must be an instance of the Node class.`);\n        }\n\n        return true;\n    },\n\n    traversalType(type) {\n        type = type.toLowerCase();\n\n        if (!type.match(/^(in|post|pre)order$/)) {\n            throw new TypeError(`First parameter must be 'preorder', 'inorder' or 'postorder', not '${type}'`);\n        }\n\n        return type;\n    },\n\n    not(name, a, b) {\n        const fn = this[name];\n\n        if (!fn) {\n            const available = Object.keys(this);\n            const indexOfNot = available.indexOf(\"not\");\n\n            available.splice(indexOfNot, 1);\n\n            throw new TypeError(`'${name}' is not defined validator. Select from: ${available.join(\", \")}.`);\n        }\n\n        return !(name === \"constructor\" ? fn.call(this, a, b) : fn.call(this, a));\n    }\n};\n\nexports.default = validators;\n},{\"./node\":5}]},{},[3]);\n\n//# sourceMappingURL=bst-extended.js.map\n"]}